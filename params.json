{"name":"DataCollection.js","tagline":"Manipulate large, in-memory datasets with ease using JavaScript","body":"# DataCollection.js !['coverage'](http://img.shields.io/badge/coverage-95.5%25-brightgreen.svg)\r\n\r\nManipulate large, in-memory datasets with ease using JavaScript.\r\n\r\nInspired by modern Object Relational Managers, DataCollection.js is a\r\nJavaScript library for storage, filtration, manipulation and accession of large\r\ndatasets. It is ideal for working with data returned from RESTful API\r\nendpoints.\r\n\r\nBoasting synchronous performance that nears native Array manipulation for large\r\n(>10,000) recordsets, let DataCollection.js do your heavy lifting for you.\r\n\r\n\r\n# Installation\r\n\r\nYou can begin using DataCollection.js by embedding the following script (assumes\r\n  it has been placed in your root directory)\r\n\r\n### Web\r\n\r\n```html\r\n<script src=\"/data_collection.js\"></script>\r\n```\r\n\r\nAlternatively, the minified version can be found at\r\n\r\n```html\r\n<script src=\"/data_collection-min.js\"></script>\r\n```\r\n\r\nYou can then start using `DataCollection` objects with\r\n\r\n```javascript\r\nvar dc = new DataCollection();\r\n```\r\n\r\n### node\r\n\r\n```bash\r\n$ npm install data-collection\r\n```\r\n\r\nFollowed by a script with this require...\r\n\r\n```javascript\r\nvar DataCollection = require('data-collection');\r\n```\r\n\r\nWoohoo!\r\n\r\n# Examples\r\n\r\nDataCollection can be used for fast, synchronous processing of large datasets\r\n(arrays of objects) - i.e. a RESTful API response.\r\n\r\nIt is especially useful for maintaining maps of specific keys and indexing\r\nresults.\r\n\r\nLet's say that I have a standardized Array containing the results of a RESTful\r\nAPI response. My data set looks like this:\r\n\r\n```javascript\r\nvar characters = [\r\n  {\r\n    id: 1,\r\n    first_name: 'Jon',\r\n    last_name: 'Snow',\r\n    gender: 'm',\r\n    age: 14,\r\n    location: 'Winterfell'\r\n  },\r\n  {\r\n    id: 2,\r\n    first_name: 'Eddard',\r\n    last_name: 'Stark',\r\n    gender: 'm',\r\n    age: 35,\r\n    location: 'Winterfell'\r\n  },\r\n  {\r\n    id: 3,\r\n    first_name: 'Catelyn',\r\n    last_name: 'Stark',\r\n    gender: 'f',\r\n    age: 33,\r\n    location: 'Winterfell'\r\n  },\r\n  {\r\n    id: 4,\r\n    first_name: 'Roose',\r\n    last_name: 'Bolton',\r\n    gender: 'm',\r\n    age: 40,\r\n    location: 'Dreadfort'\r\n  },\r\n  {\r\n    id: 5,\r\n    first_name: 'Ramsay',\r\n    last_name: 'Snow',\r\n    gender: 'm',\r\n    age: 15,\r\n    location: 'Dreadfort'\r\n  }\r\n];\r\n```\r\n\r\nFirst off, let's load this data into a `DataCollection`...\r\n\r\n```javascript\r\nvar charDC = new DataCollection(characters);\r\n```\r\n\r\nNow, let's approach some problems...\r\n\r\n---\r\n\r\n### How do I find the Bastards from the North?\r\n\r\n`filter` allows us to look for a specific value.\r\n\r\n```javascript\r\nvar bastards = charDC.query().filter({last_name: 'Snow'}).values();\r\n```\r\n\r\n---\r\n\r\n### How do I find out the highest age?\r\n\r\nA simple `max()` call will do the trick.\r\n\r\n\r\n```javascript\r\nvar topAge = charDC.query().max('age');\r\n```\r\n\r\n---\r\n\r\n### How do I find all the unique locations?\r\n\r\nDataCollection provides an easy `distinct` function for use.\r\n\r\n\r\n###### DataCollection\r\n```javascript\r\nvar locations = charDC.query().distinct('location');\r\n```\r\n\r\n---\r\n\r\n### What if I want to permanently remove Catelyn and Eddard?\r\n\r\nNo problem!\r\n\r\n###### DataCollection\r\n```javascript\r\ncharDC.query().filter({first_name__in: ['Catelyn', 'Eddard']}).remove();\r\n```\r\n\r\n---\r\n\r\n### More examples\r\n\r\n```javascript\r\n// Will return Jon, Eddard and Ramsay\r\ncharDC.query()\r\n  .filter({gender: 'm', age__lt: 40})\r\n  .values();\r\n\r\n// Updates location\r\ncharDC.query()\r\n  .filter({location: 'Winterfell'})\r\n  .exclude({first_name: 'Jon'})\r\n  .update({location: 'King\\'s Landing'});\r\n\r\n// Finds Roose, Ramsay\r\nchardDC.query()\r\n  .filter({first_name__contains: 'R'});\r\n\r\n// Finds Roose, Ramsay, Eddard --- case insensitive\r\ncharDC.query()\r\n  .filter({first_name__icontains: 'R'})\r\n  .values();\r\n\r\n// Creates a mapping for current future values...\r\ncharDC.createMapping('is_bastard', function(row) {\r\n  return row.last_name === 'Snow';\r\n});\r\n\r\n// true\r\ncharDC.query().filter({first_name: 'Jon'}).first().is_bastard;\r\n// false\r\ncharDC.query().filter({first_name: 'Catelyn'}).first().is_bastard;\r\n\r\n// Add an entry (Can accept each entry as an argument, or an array)\r\ncharDC.insert({\r\n  id: 6,\r\n  first_name: 'Rob',\r\n  last_name: 'Stark',\r\n  gender: 'm',\r\n  age: 14,\r\n  location: 'Winterfell'\r\n});\r\n\r\n// new entry, but is also false\r\ncharDC.query().filer({first_name: 'Rob'}).first().is_bastard;\r\n\r\n// will return Eddard and Catelyn rows\r\ncharDC.query()\r\n  .sort('age', true) // sortDesc = true\r\n  .limit(1, 2)\r\n  .values();\r\n```\r\n\r\nAnd there's more! Try playing around.\r\n\r\n\r\n# Documentation\r\n\r\n## DataCollection Object\r\n\r\n##### DataCollection\r\n```\r\nDataCollection( [Optional Array] data )\r\n```\r\n\r\n  Constructor (used with `new` keyword)\r\n\r\n  If provided data, will run `DataCollection.prototype.load(data)`\r\n\r\n---\r\n\r\n### Methods\r\n\r\n---\r\n\r\n##### DataCollection.prototype.defineIndex\r\n```\r\ndefineIndex( [String] key )\r\n  returns self\r\n```\r\n\r\n  Define a *unique* key to use as an index for this collection\r\n  used for `DataCollection.prototype.exists`, `DataCollection.prototype.fetch` and\r\n  `DataCollection.prototype.destroy`\r\n\r\n  All indexed values will be converted to strings, be careful about\r\n  uniqueness\r\n\r\n---\r\n\r\n##### DataCollection.prototype.createMapping\r\n```\r\ncreateMapping( [String] key, [Function] map -> ([Object] row) )\r\n  returns self\r\n```\r\n\r\n  Define a mapped key, and a function that returns the associated value\r\n  based on the input row. Can be used any time, new mappings will be applied\r\n  to your DataCollection immediately.\r\n\r\n######  Example:\r\n\r\n```javascript\r\nvar dc = new DataCollection();\r\ndc.createMapping('c', function(row) { return row['a'] + row['b']; });\r\ndc.load([{a: 1, b: 2}, {a: 2, b: 3}]);\r\nconsole.log(dc.query().last()); // logs {a: 2, b: 3, c: 5}\r\n```\r\n\r\n---\r\n\r\n##### DataCollection.prototype.exists\r\n```\r\nexists( [String] indexedValue )\r\n  returns boolean\r\n```\r\n\r\n  Determine whether the DataCollection has an entry with the specified index\r\n  based on your index key\r\n\r\n---\r\n\r\n##### DataCollection.prototype.fetch\r\n```\r\nfetch( [String] indexedValue )\r\n  returns Object\r\n```\r\n\r\n  fetches object (if it exists) associated with the specified index based on\r\n  your index key. Otherwise, returns `null`.\r\n\r\n---\r\n\r\n##### DataCollection.prototype.destroy\r\n```\r\ndestroy( [String] indexedValue )\r\n  returns true\r\n```\r\n\r\n  Destroys object (if it exists) associated with the specified index based\r\n  on your index key. Otherwise, throws an error.\r\n\r\n---\r\n\r\n##### DataCollection.prototype.load\r\n```\r\nload( [Object] row_1, ..., [Object] row_n )\r\nload( [Array] data )\r\n  returns true\r\n```\r\n\r\n  Loads (truncates, then adds) new data from individual row Objects or an\r\n  array of row Objects\r\n\r\n---\r\n\r\n##### DataCollection.prototype.insert\r\n```\r\ninsert( [Object] row_1, ..., [Object] row_n )\r\ninsert( [Array] data )\r\n  returns true\r\n```\r\n\r\n  Inserts new data from individual row Objects or an array of row Objects\r\n\r\n---\r\n\r\n##### DataCollection.prototype.truncate\r\n```\r\ntruncate()\r\n  returns true\r\n```\r\n\r\n  Empties all data from DataCollection\r\n\r\n---\r\n\r\n##### DataCollection.prototype.query\r\n```\r\nquery()\r\n  returns DataCollectionQuery\r\n```\r\n\r\n  returns a new DataCollectionQuery containing a referential set of all data\r\n  from the parent DataCollection.\r\n\r\n## DataCollectionQuery Object\r\n\r\n##### DataCollectionQuery\r\n```\r\nDataCollectionQuery()\r\n```\r\n\r\n  Constructor, only accessible via `DataCollection.prototype.query()`\r\n\r\n---\r\n\r\n### Methods\r\n\r\n---\r\n\r\n##### DataCollectionQuery.prototype.filter\r\n```\r\nfilter( [Object] filters )\r\n  returns new DataCollectionQuery\r\n```\r\n\r\n  Returns a new `DataCollectionQuery` containing a referential subset of its\r\n  parent. *Contains* filtered values (see: **Filters**)\r\n\r\n---\r\n\r\n##### DataCollectionQuery.prototype.exclude\r\n```\r\nexclude( [Object] filters )\r\n  returns new DataCollectionQuery\r\n```\r\n\r\n  Returns a new `DataCollectionQuery` containing a referential subset of its\r\n  parent. *Excludes* filtered values (see: **Filters**)\r\n\r\n---\r\n\r\n##### DataCollectionQuery.prototype.spawn\r\n```\r\nspawn( [Boolean] ignoreIndex )\r\n  returns new DataCollection\r\n```\r\n\r\n  Creates a new `DataCollection` object (non-referential, new values) from\r\n  all data contained within the current `DataCollectionQuery`. Will inherit the\r\n  parent DataCollection's index unless `ignoreIndex` is set to true.\r\n\r\n---\r\n\r\n##### DataCollectionQuery.prototype.each\r\n```\r\neach( [Function] callback -> ([Object] row, [Integer] index) )\r\n  returns self\r\n```\r\n\r\n  Loops through all rows of data, and performs `callback` for each one\r\n\r\n###### Example\r\n\r\n```javascript\r\nvar dc = new DataCollection([{a: 1, b: 2}, {a: 2, c: 3}]);\r\nvar query = dc.query();\r\ndc.each(function(row, index) {\r\n  console.log(index + ': ' + row['a'] + ', ' + row['b']);\r\n});\r\n\r\n// logs\r\n//    0: 1, 2\r\n//    1: 2, 3\r\n```\r\n\r\n---\r\n\r\n##### DataCollectionQuery.prototype.update\r\n```\r\nupdate( [Object] values )\r\n  returns self\r\n```\r\n\r\n  Assigns all key-value pairs from *values* to every row in the current\r\n  selection (updates parent DataCollection)\r\n\r\n---\r\n\r\n##### DataCollectionQuery.prototype.remove\r\n```\r\nremove()\r\n  returns true\r\n```\r\n\r\n  Removes all rows contained in `DataCollectionQuery` from the parent\r\n  `DataCollection`\r\n\r\n---\r\n\r\n##### DataCollectionQuery.prototype.sort\r\n```\r\nsort( [String] key, [Optional Boolean] sortDesc = false )\r\n  returns DataCollectionQuery\r\n```\r\n\r\n  Returns a new DataCollectionQuery containing the parent's rows, sorted\r\n  by a specific key (descending if sortDesc = true).\r\n\r\n  Sort order is as follows:\r\n  null, NaN, Number, Infinity, Boolean, String, Object\r\n\r\n---\r\n\r\n##### DataCollectionQuery.prototype.values\r\n```\r\nvalues( [Optional String] key )\r\n  returns Array\r\n```\r\n\r\n  Returns an array of all row Objects (each Object is referential!) in the\r\n  `DataCollectionQuery`, or an array of all values from a specific key if\r\n  provided\r\n\r\n---\r\n\r\n##### DataCollectionQuery.prototype.max\r\n```\r\nmax( [String] key )\r\n  returns Float\r\n```\r\n\r\n  Returns the maximum value (JavaScript \"greater than (>)\") contained in key\r\n  from the `DataCollectionQuery` subset\r\n\r\n---\r\n\r\n##### DataCollectionQuery.prototype.min\r\n```\r\nmin( [String] key )\r\n  returns Float\r\n```\r\n\r\n  Returns the minimum value (JavaScript \"greater than (>)\") contained in key\r\n  from the DataCollectionQuery subset\r\n\r\n---\r\n\r\n##### DataCollectionQuery.prototype.sum\r\n```\r\nsum( [String] key )\r\n  returns Float\r\n```\r\n\r\n  Returns the numeric sum of all values contained in key from the\r\n  `DataCollectionQuery` subset\r\n\r\n---\r\n\r\n##### DataCollectionQuery.prototype.avg\r\n```\r\navg( [String] key )\r\n  returns Float\r\n```\r\n\r\n  Returns the numeric average of all values contained in key from the\r\n  `DataCollectionQuery` subset\r\n\r\n---\r\n\r\n##### DataCollectionQuery.prototype.reduce\r\n```\r\nreduce( [String] key, [Function] callback -> ([Any] prevValue, [Any] curValue, [Any] index) )\r\n  returns Any\r\n```\r\n\r\n  Runs a specified reduction function on all values contained in key from\r\n  the `DataCollectionQuery` subset.\r\n\r\n---\r\n\r\n##### DataCollectionQuery.prototype.distinct\r\n```\r\ndistinct( [String] key )\r\n  returns Array\r\n```\r\n\r\n  Returns an array of all unique values (converted to String) with specified\r\n  key from the `DataCollectionQuery` subset\r\n\r\n---\r\n\r\n##### DataCollectionQuery.prototype.limit\r\n```\r\nlimit( [Integer] count )\r\nlimit( [Integer] offset, [Integer] count )\r\n  returns new DataCollectionQuery\r\n```\r\n\r\n  Returns a new `DataCollectionQuery` containing the first *count* items from\r\n  the current `DataCollectionQuery`, or containing *count* items beginning at\r\n  *offset*\r\n\r\n---\r\n\r\n##### DataCollectionQuery.prototype.count\r\n```\r\ncount()\r\n  returns Integer\r\n```\r\n\r\n  Returns the amount of items (rows) in the current DataCollectionQuery\r\n\r\n## Filters\r\n\r\nDataCollection supports a number of filters in the `filter()` and `exclude()`\r\nfunctions. Many will be familiar if you've used the Django ORM or checked out\r\nanother project of ours, [FastAPI](http://github.com/thestorefront/FastAPI).\r\n\r\nAll filters are prefixed with a double underscore when used.\r\n\r\n##### is\r\n```javascript\r\na === b\r\n```\r\n\r\nChecks for exact equivalence. Equivalent to no specified filter. (Only the field\r\nname). Exists for the purpose of standardization and edge cases (i.e. if your\r\nfield ends with `__`).\r\n\r\n---\r\n\r\n##### not\r\n```javascript\r\na !== b\r\n```\r\n\r\nChecks for inequivalence. (Not exactly matching.)\r\n\r\n---\r\n\r\n##### gt\r\n```javascript\r\na > b\r\n```\r\n\r\nChecks if contained value is greater than provided value.\r\n\r\n---\r\n\r\n##### gte\r\n```javascript\r\na >= b\r\n```\r\n\r\nChecks if contained value is greater than or equal to provided value.\r\n\r\n---\r\n\r\n##### lt\r\n```javascript\r\na < b\r\n```\r\n\r\nChecks if contained value is less than provided value.\r\n\r\n---\r\n\r\n##### lte\r\n```javascript\r\na <= b\r\n```\r\n\r\nChecks if contained value is less than or equal to provided value.\r\n\r\n---\r\n\r\n##### contains\r\n```javascript\r\na.indexOf(b) > -1\r\n```\r\n\r\nChecks if contained value contains the provided value. Works for strings\r\nor arrays.\r\n\r\n---\r\n\r\n##### icontains\r\n```javascript\r\na.toLowerCase().indexOf(b.toLowerCase()) > -1\r\n```\r\n\r\nCase insensitive contains. Only works for strings comparisons.\r\n\r\n---\r\n\r\n##### in\r\n```javascript\r\nb.indexOf(a) > -1\r\n```\r\n\r\nChecks if the contained value exists in the provided value. Works for strings or\r\narrays.\r\n\r\n---\r\n\r\n##### not_in\r\n```javascript\r\nb.indexOf(a) === -1\r\n```\r\n\r\nChecks if the contained value does not exist in the provided value. Works for\r\nstrings or arrays.\r\n\r\n\r\n# Tests and Benchmarks\r\n\r\nCurrent test coverage is **95.5%**\r\n\r\nIncluded with this repository are tests (in `/tests`) to make sure everything\r\nis running as expected.\r\n\r\nThere is a node webserver in the root repository directory that can be used\r\nfor testing on `localhost:8888`. To start the server (with node installed) simply run:\r\n\r\n```\r\n$ node testserv.js\r\n```\r\n\r\nTests are run using [QUnit](http://qunitjs.com/), coverage sampled using [Blanket.js](http://blanketjs.org/).\r\n\r\nA few benchmarks are logged in the JavaScript developer console.\r\n\r\n\r\n# Acknowledgements\r\n\r\nDataCollection is MIT licensed, feel free to use it wherever you'd like.\r\nThanks for checking us out! We welcome good, thoughtful contributions.\r\n\r\nDataCollection was created at\r\n[Storefront, Inc.](http://thestorefront.com/) in 2014 by [Keith Horwood](http://keithwhor.com).\r\n\r\nFeel free to follow on Twitter:\r\n\r\n[@thestorefront](http://twitter.com/thestorefront), [@keithwhor](http://twitter.com/keithwhor)\r\n\r\n\r\nOr check out our GitHub Repositories for more libraries:\r\n\r\n[Storefront on GitHub](http://github.com/thestorefront), [Keith Horwood on GitHub](http://github.com/keithwhor)\r\n","google":"UA-44899638-7","note":"Don't delete this file! It's used internally to help with page regeneration."}